#! /usr/bin/env python3
"""A steganography example using PNG. (WIP, not functional yet)"""
from struct import pack, unpack
import sys
import zlib


# A friendly name and channel count for each color type
IMAGE_COLOR_TYPES = {
    0: ('grayscale', 1),
    2: ('rgb/truecolor', 3),
    3: ('indexed', 1),
    4: ('grayscale+alpha', 2),
    6: ('rgb+alpha', 4),
}


class NotAPNGError(Exception):
    """Raised if the provided data is not a PNG."""


class InvalidChunkLength(Exception):
    """Raised if an invalid chunk length is provided."""


class ProcessingError(Exception):
    """Raised when a chunk being processed has an unexpected CRC."""


class UnsupportedColorType(Exception):
    """Raised if we see a color type we don't know how to manipulate."""


class PNGChunk:
    """A chunk of a PNG image."""
    def __init__(self, chunk_type, data=None):
        self.chunk_type = chunk_type
        self.data = data or b''

        # Technically, we should determine whether it is safe to copy other
        # chunks based on the fourth character of the chunk_type being lower
        # case, and only copy specific upper case chunks if we know they will
        # be safe, since we're modifying critical data.
        # For the moment, though, we will ignore that.

    @property
    def length(self):
        """Provide the length of the chunk, in the way it'll need to be
        represented in the file.
        """
        length = len(self.data)
        if length > 2**32:
            raise InvalidChunkLength(
                'Length is represented by 4 bytes, so max {}'.format(2**32))

        return pack('>I', length)

    @property
    def crc(self):
        """Provide the CRC of the given chunk."""
        return pack('>I', zlib.crc32(self.chunk_type + self.data))

    @property
    def critical(self):
        """Determine if this is a critical PNG chunk."""
        return self.chunk_type in ['IHDR', 'PLTE', 'IDAT', 'IEND']

    def __getitem__(self, idx):
        return self.data[idx]

    def __repr__(self):
        return str(self.length + self.chunk_type + self.data + self.crc)


def process_image_data(image_data):
    """Process provided PNG data.
    :param image_data: The raw PNG image data.
    """
    png_header = b'\x89PNG\r\n\x1A\n'

    # Make sure we're working on a PNG
    if not image_data.startswith(png_header):
        raise NotAPNGError('This program only works with PNGs.')

    image = {
        'header': png_header,
        'chunks': [],
        'color_type': None,
        'bit_depth': None,
        'channels': None,
        'width': None,
        'height': None,
    }

    remaining_data = image_data[len(png_header):]
    while remaining_data:
        length = unpack('>I', remaining_data[:4])[0]
        chunk_type = remaining_data[4:8]
        chunk_data = remaining_data[8:8+length]
        chunk_crc = remaining_data[8+length:12+length]
        chunk = PNGChunk(chunk_type, chunk_data)
        if chunk.crc != chunk_crc:
            raise ProcessingError(
                'CRCs do not match. Found {found}, expected {expected}. '
                'Chunk data: {data}'.format(
                    found=chunk_crc,
                    expected=chunk.crc,
                    data=str(chunk),
                )
            )
        image['chunks'].append(chunk)
        remaining_data = remaining_data[12+length:]

    image_color_type = ''
    # By specification, IHDR must be the first chunk. If it's not, we'll crash
    ihdr = image['chunks'][0]
    color_type, channels = IMAGE_COLOR_TYPES[unpack('b', ihdr[9:10])[0]]

    image['color_type'] = color_type
    image['bit_depth'] = unpack('b', ihdr[8:9])[0]
    image['channels'] = channels
    image['width'] = unpack('>I', ihdr[0:4])[0]
    image['height'] = unpack('>I', ihdr[4:8])[0]

    if color_type != 'rgb+alpha':
        raise UnsupportedColorType(
            '{} is not currently a supported color type'.format(
                image_color_type
            )
        )

    return image


def main():
    """Be steganographic as requested by the user."""
    if len(sys.argv) != 2:
        sys.stderr.write('Usage: {} <path to png image>')
        sys.exit(1)
    with open(sys.argv[1], 'rb') as image_handle:
        data = image_handle.read()
    img = process_image_data(data)

    pixel_length = img['channels'] * img['bit_depth']

    print('Width {width} x Height {height} = {pixel_count}'.format(
        width=img['width'],
        height=img['height'],
        pixel_count=img['width']*img['height'],
    ))

    for chunk in img['chunks']:
        if chunk.chunk_type == b'IDAT':
            decompressed = zlib.decompress(chunk.data)
            print(len(decompressed) / pixel_length)
    print('Values are currently off because the filtering step is not '
          'implemented.')


if __name__ == '__main__':
    main()
