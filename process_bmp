#! /usr/bin/env python3
"""A steganography example using BMP (bitmap)."""
import argparse
from struct import unpack
import sys


class UnsupportedFormat(Exception):
    """Raised if we don't see the expected files structure."""


class TooMuchData(Exception):
    """Raised if too much data is passed for the image to store."""


class Bitmap:
    """Class to load and store a bitmap."""
    def __init__(self, data):
        """Initialise the stegano-ready bitmap.
        :param data: The bitmap image data.
        """
        if data[0:2] != b'BM':
            raise UnsupportedFormat(
                'Header was expected to start with BM, but started with {}. '
                'This is not a supported bitmap.'.format(
                    data[0:2].decode('utf-8')
                ),
            )

        first_image_byte = unpack('<I', data[10:14])[0]

        self.base_header = data[:14]
        self.dib_header = data[14:first_image_byte]

        # We should check what DIB header type this is, as this will crash and
        # burn if it is not of type BITMAPINFOHEADER. However, let's keep this
        # example simpler than that.
        self.width = unpack('<i', data[18:22])[0]
        self.height = unpack('<i', data[22:26])[0]
        self.bytes_per_pixel = int(unpack('<H', data[28:30])[0]/8)

        self.image_data = data[first_image_byte:]

    @property
    def full_data(self):
        """Return the full data for saving to file."""
        return self.base_header + self.dib_header + self.image_data

    @property
    def pixel_count(self):
        """Determine the image's pixel count."""
        return self.width * self.height

    @property
    def usable_data_storage(self):
        """Calculate how many bytes of data can be stored in this image."""
        # We are assuming at least RGB here, and ignoring alpha.
        # Everything will blow up interestingly if bits_per_pixel < 24.
        return (self.pixel_count * 3)//8

    @property
    def pixels(self):
        """Retrieve a list of the pixels in the image."""
        return [
            self.image_data[idx:idx+self.bytes_per_pixel]
            for idx in range(0, len(self.image_data), self.bytes_per_pixel)
        ]

    @pixels.setter
    def pixels(self, pixels):
        """Update the image data with modified pixels."""
        self.image_data = b''.join(pixels)

    def store_data(self, data):
        """Store provided utf-8 data."""
        bytes_data = data.encode('utf-8')
        remaining_storage = self.usable_data_storage - len(bytes_data)

        if remaining_storage < 0:
            raise TooMuchData(
                '{provided} bytes of data were provided, but this image can '
                'only hold {usable}.'.format(
                    provided=len(bytes_data),
                    usable=self.usable_data_storage,
                )
            )

        if remaining_storage == 0:
            # So that we know when we found all the data when retrieving
            bytes_data += b'\x00'

        bits = []
        for byte in bytes_data:
            this_byte = []
            for i in range(8):
                this_byte.append(byte % 2)
                byte = byte >> 1
            bits.extend(reversed(this_byte))

        if self.bytes_per_pixel == 4:
            # Don't mess with the alpha
            start_byte = 1
        else:
            start_byte = 0

        new_pixels = []
        for pixel in self.pixels:
            pixel = list(pixel)
            # We're assuming we have three bytes to use on each pixel.
            # If bits per pixel < 24 this will result in interesting times.
            # We reverse it so we can get it in the right order after popping
            bits_for_this_pixel = list(reversed(bits[:3]))
            bits = bits[3:]

            # Zero the usable bits then set the lowest bit to the appropriate
            # value
            for pos in range(start_byte, self.bytes_per_pixel):
                pixel[pos] = pixel[pos] >> 1
                pixel[pos] = pixel[pos] << 1
                if bits_for_this_pixel:
                    pixel[pos] += bits_for_this_pixel.pop()

            new_pixels.append(bytes(pixel))

        self.pixels = new_pixels


def _add_default_args(subparser):
    """Add the arguments all subparsers need."""
    subparser.add_argument(
        'bitmap_file_name',
        help='The name of the bitmap file.',
    )


def main():
    """Determine what steganographic operations were requested by the user and
    perform them.
    """
    parser = argparse.ArgumentParser(
        description='Do steganographic things to a bitmap.',
    )

    subparsers = parser.add_subparsers(help='Steganographic action',
                                       dest='action')

    check = subparsers.add_parser(
        'check',
        help='Check how much storage is available in the bitmap.',
    )

    store = subparsers.add_parser(
        'store',
        help='Store a given string in the target bitmap.',
    )

    retrieve = subparsers.add_parser(
        'retrieve',
        help='Retrieve stored data from the target bitmap.',
    )

    for subparser in check, store, retrieve:
        _add_default_args(subparser)

    store.add_argument(
        'data_to_store',
        help='UTF-8 data to store in provided bitmap.',
    )

    args = parser.parse_args()

    if args.action not in ['check', 'store', 'retrieve']:
        parser.print_help()
        sys.exit(1)

    with open(args.bitmap_file_name, 'rb') as image_handle:
        image_data = image_handle.read()
    image = Bitmap(image_data)

    if args.action == 'check':
        print(image.usable_data_storage)
    elif args.action == 'store':
        image.store_data(args.data_to_store)
        with open(args.bitmap_file_name + '.mod.bmp', 'wb') as image_handle:
            image_handle.write(image.full_data)
    elif args.action == 'retrieve':
        print('TODO')


if __name__ == '__main__':
    main()
