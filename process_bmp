#! /usr/bin/env python3
"""A steganography example using BMP (bitmap)."""
import argparse
from struct import unpack
import sys


class UnsupportedFormat(Exception):
    """Raised if we don't see the expected files structure."""


class Bitmap:
    """Class to load and store a bitmap."""
    def __init__(self, data, usable_bits_per_color_byte=1):
        """Initialise the stegano-ready bitmap.
        :param data: The bitmap image data.
        :param usable_bits_per_color_byte: Integer specifying how many bits
                                           per color byte can be used to
                                           store information. Setting this
                                           higher may cause trippy images.
                                           Setting it to 8+ will use all of
                                           each image byte and thus corrupt
                                           the image entirely.
                                           Setting it less than 1 will not
                                           allow any information to be stored.
        """
        # This has been defaulted to 1, as this gives a change of up to 1 on
        # a value that can range from 0 - 255, so about a 0.4% change.
        self.usable_bits_per_color_byte = usable_bits_per_color_byte

        if data[0:2] != b'BM':
            raise UnsupportedFormat(
                'Header was expected to start with BM, but started with {}. '
                'This is not a supported bitmap.'.format(
                    data[0:2].decode('utf-8')
                ),
            )

        first_image_byte = unpack('<I', data[10:14])[0]

        self.base_header = data[:14]
        self.dib_header = data[14:first_image_byte]

        # We should check what DIB header type this is, as this will crash and
        # burn if it is not of type BITMAPINFOHEADER. However, let's keep this
        # example simpler than that.
        self.width = unpack('<i', data[18:22])[0]
        self.height = unpack('<i', data[22:26])[0]
        self.bytes_per_pixel = unpack('<H', data[28:30])[0]/8

        self.image_data = data[first_image_byte:]

    @property
    def pixel_count(self):
        """Determine the image's pixel count."""
        return self.width * self.height

    def calculate_usable_data_storage(self):
        """Calculate how many bits of data can be stored in this image."""
        # We are assuming at least RGB here, and ignoring alpha.
        # Everything will blow up interestingly if bits_per_pixel < 24.
        return self.pixel_count * self.usable_bits_per_color_byte


def _add_default_args(subparser):
    """Add the arguments all subparsers need."""
    subparser.add_argument(
        '-s', '--storage-bits',
        help='How many bits in each color byte to use for storage.',
        type=int,
        default=1,
    )

    subparser.add_argument(
        'bitmap_file_name',
        help='The name of the bitmap file.',
    )


def main():
    """Determine what steganographic operations were requested by the user and
    perform them.
    """
    parser = argparse.ArgumentParser(
        description='Do steganographic things to a bitmap.',
    )

    subparsers = parser.add_subparsers(help='Steganographic action',
                                       dest='action')

    check = subparsers.add_parser(
        'check',
        help='Check how much storage is available in the bitmap.',
    )

    store = subparsers.add_parser(
        'store',
        help='Store a given string in the target bitmap.',
    )

    retrieve = subparsers.add_parser(
        'retrieve',
        help='Retrieve stored data from the target bitmap.',
    )

    for subparser in check, store, retrieve:
        _add_default_args(subparser)

    args = parser.parse_args()

    if args.action not in ['check', 'store', 'retrieve']:
        parser.print_help()
        sys.exit(1)

    with open(args.bitmap_file_name, 'rb') as image_handle:
        image_data = image_handle.read()
    image = Bitmap(image_data, args.storage_bits)

    if args.action == 'check':
        print(image.calculate_usable_data_storage())
    elif args.action == 'store':
        print('TODO')
    elif args.action == 'retrieve':
        print('TODO')


if __name__ == '__main__':
    main()
